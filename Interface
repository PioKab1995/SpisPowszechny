

library(shiny)

# Define UI for random distribution app ----
ui <- fluidPage(
    
    # App title ----
    titlePanel("Statystyki Przestępstw "),
    
    # Sidebar layout with input and output definitions ----
    sidebarLayout(
        
        # Sidebar panel for inputs ----
        sidebarPanel(
            
            # Input: Select the random distribution type ----
            radioButtons("dist", "Wybierz opcje :",
                         c("% wykrycia" = "% wykrycia",
                           "Przestepstwa wykryte" = "Przestepstwa wykryte",
                           "Przestępstwa stwierdzone" = "Przestępstwa stwierdzone"
                           )),
            
            # br() element to introduce extra vertical spacing ----
            br(),
            
            # Input: Slider for the number of observations to generate ----
            sliderInput("n",
                        "Wybierz rok: ",
                        value = 1999,
                        min = 1999,
                        max = 2017)
            
        ),
        
        # Main panel for displaying outputs ----
        mainPanel(
            
            # Output: Tabset w/ plot, summary, and table ----
            tabsetPanel(type = "tabs",
                        tabPanel("Histogram", plotOutput("plot")),
                        tabPanel("Interaktywna mapa", verbatimTextOutput("summary")),
                        tabPanel("Tabela", tableOutput("table"))
            )
            
        )
    )
)

# Define server logic for random distribution app ----
server <- function(input, output) {
    
    # Reactive expression to generate the requested distribution ----
    # This is called whenever the inputs change. The output functions
    # defined below then use the value computed from this expression
    d <- reactive({
        dist <- switch(input$dist,
                       wykrycia = rwykrycia,
                       wykryte = rwykryte,
                       stwierdzone = rstiwerdzone,
                       exp = rexp,
                       rnorm)
        
        dist(input$n)
    })
    
    # Generate a plot of the data ----
    # Also uses the inputs to build the plot label. Note that the
    # dependencies on the inputs and the data reactive expression are
    # both tracked, and all expressions are called in the sequence
    # implied by the dependency graph.
    output$plot <- renderPlot({
        dist <- input$dist
        n <- input$n
        
        hist(d(),
             main = paste("", dist, "(", n, ")", sep = ""),
             col = "#75AADB", border = "black")
    })
    
    # Generate a summary of the data ----
    output$summary <- renderPrint({
        summary(d())
    })
    
    # Generate an HTML table view of the data ----
    output$table <- renderTable({
        d()
    })
    
}

# Create Shiny app ----
shinyApp(ui, server)

